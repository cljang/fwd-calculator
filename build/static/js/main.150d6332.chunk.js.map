{"version":3,"sources":["components/Header.js","components/CalcDisplay.js","globals/calculator-button-data.js","components/CalcButtons.js","components/Calculator.js","components/Footer.js","components/App.js","index.js"],"names":["Header","title","defaultProps","year","CalcDisplay","display","result","operator","memory","className","calculatorButtons","type","text","value","CalcButtons","handleButtonClick","map","button","index","style","gridArea","onClick","wasEvaluated","Calculator","useState","setDisplay","setResult","setOperator","setMemory","clearDisplay","clearResult","clearOperator","handleClear","formatCalculation","calculation","Number","length","base10Exp","Math","log","abs","toExponential","toPrecision","calculate","parseFloat","sqrt","handleNumber","handleOperator","handleEqual","indexOf","handleDecimal","handleUnaryOperator","handleMemory","Footer","author","Date","getFullYear","App","basename","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.150d6332.chunk.js","sourcesContent":["function Header({title}) {\r\n\r\n\r\n  return (\r\n    <header>\r\n      <h1>{title}</h1>\r\n    </header>\r\n  );\r\n  \r\n}\r\n\r\nHeader.defaultProps = {\r\n  year: \"My React App\"\r\n}\r\n\r\nexport default Header;\r\n","function CalcDisplay({display, result, operator, memory}) {\r\n\r\n\r\n  return (\r\n    <div className=\"calc-display\">\r\n      <p className=\"small-display calculation-history\">{result} {operator}</p>\r\n      <p className=\"small-display memory\">{memory ? \"Memory: \" + memory : \"\"}</p>\r\n      <p className=\"display-value\">{display}</p>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default CalcDisplay;\r\n","export const calculatorButtons = [\r\n    {\r\n        type: 'clear',\r\n        className: 'ac',\r\n        text: 'AC',\r\n        value: 'All Clear'\r\n    },\r\n    {\r\n        type: 'clear',\r\n        className: 'c',\r\n        text: 'C',\r\n        value: 'Clear'\r\n    },\r\n    {\r\n        type: 'memory',\r\n        className: 'ms',\r\n        text: 'MS',\r\n        value: 'Memory Save',\r\n    },\r\n    {\r\n        type: 'memory',\r\n        className: 'mc',\r\n        text: 'MC',\r\n        value: 'Memory Clear',\r\n    },\r\n    {\r\n        type: 'memory',\r\n        className: 'mr',\r\n        text: 'MR',\r\n        value: 'Memory Recall',\r\n    },\r\n    {\r\n        type: 'memory',\r\n        className: 'm-minus',\r\n        text: 'M-',\r\n        value: 'Memory Subtract',\r\n    },\r\n    {\r\n        type: 'memory',\r\n        className: 'm-plus',\r\n        text: 'M+',\r\n        value: 'Memory Addition',\r\n    },\r\n    {\r\n        type: 'number',\r\n        className: 'seven',\r\n        text: 7,\r\n        value: 7,\r\n    },\r\n    {\r\n        type: 'number',\r\n        className: 'eight',\r\n        text: 8,\r\n        value: 8,\r\n    },\r\n    {\r\n        type: 'number',\r\n        className: 'nine',\r\n        text: 9,\r\n        value: 9,\r\n    },\r\n    {\r\n        type: 'number',\r\n        className: 'four',\r\n        text: 4,\r\n        value: 4,\r\n    },\r\n    {\r\n        type: 'number',\r\n        className: 'five',\r\n        text: 5,\r\n        value: 5,\r\n    },\r\n    {\r\n        type: 'number',\r\n        className: 'six',\r\n        text: 6,\r\n        value: 6,\r\n    },\r\n    {\r\n        type: 'number',\r\n        className: 'one',\r\n        text: 1,\r\n        value: 1,\r\n    },\r\n    {\r\n        type: 'number',\r\n        className: 'two',\r\n        text: 2,\r\n        value: 2,\r\n    },\r\n    {\r\n        type: 'number',\r\n        className: 'three',\r\n        text: 3,\r\n        value: 3,\r\n    },\r\n    {\r\n        type: 'number',\r\n        className: 'zero',\r\n        text: 0,\r\n        value: 0,\r\n    },\r\n    {\r\n        type: 'decimal',\r\n        className: 'decimal',\r\n        text: '.',\r\n        value: '.',\r\n    },\r\n    {\r\n        type: 'unary-operator',\r\n        className: 'sign',\r\n        text: '+/-',\r\n        value: '+/-',\r\n    },\r\n    {\r\n        type: 'unary-operator',\r\n        className: 'percent',\r\n        text: '%',\r\n        value: 'Percent',\r\n    },\r\n    {\r\n        type: 'unary-operator',\r\n        className: 'square-root',\r\n        text: '\\u221a',\r\n        value: 'Square Root',\r\n    },\r\n    {\r\n        type: 'operator',\r\n        className: 'multiply',\r\n        text: '\\u00d7',\r\n        value: 'Multiply',\r\n    },\r\n    {\r\n        type: 'operator',\r\n        className: 'divide',\r\n        text: '\\u00f7',\r\n        value: 'Divide',\r\n    },\r\n    {\r\n        type: 'operator',\r\n        className: 'add',\r\n        text: '+',\r\n        value: 'Add',\r\n    },\r\n    {\r\n        type: 'operator',\r\n        className: 'subtract',\r\n        text: '-',\r\n        value: 'Subtract',\r\n    },\r\n    {\r\n        type: 'enter',\r\n        className: 'equal',\r\n        text: '=',\r\n        value: 'Equal',\r\n    }\r\n]\r\n\r\nexport default calculatorButtons;","import calculatorButtons from \"../globals/calculator-button-data\"\r\n\r\n\r\nfunction CalcButtons({handleButtonClick}) { \r\n\r\n  const createButton = (button, index) => {\r\n    const style = {\r\n      gridArea: button.className\r\n    };\r\n  \r\n    return (\r\n      <button \r\n        className={`${button.type} ${button.className}`} \r\n        key={index}\r\n        style={style}\r\n        onClick={() => {handleButtonClick(button)}}\r\n      >\r\n          {button.text}\r\n      </button>\r\n    )\r\n  }\r\n  \r\n  return (\r\n    <div className=\"calc-buttons\">\r\n      {calculatorButtons.map(createButton)}\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default CalcButtons;\r\n","import CalcDisplay from \"./CalcDisplay\";\r\nimport CalcButtons from \"./CalcButtons\";\r\nimport { useState } from \"react\";\r\n\r\nlet wasEvaluated = false;\r\n\r\nfunction Calculator() {\r\n  // Current Display\r\n  const [display, setDisplay] = useState(\"\");\r\n  // Stored Result\r\n  const [result, setResult] = useState();\r\n  // Selected Operation\r\n  const [operator, setOperator] = useState(\"\");\r\n  // Memory Value\r\n  const [memory, setMemory] = useState()\r\n\r\n\r\n  // Reset functions for states\r\n  const clearDisplay = () => {\r\n    setDisplay(\"\");\r\n  }\r\n\r\n  const clearResult = () => {\r\n    setResult();\r\n  }\r\n\r\n  const clearOperator = () => {\r\n    setOperator(\"\");\r\n  }\r\n\r\n  const clearMemory = () => {\r\n    setMemory();\r\n  }\r\n\r\n  // Function to handle number button clicks\r\n  const handleNumber = (button) => {\r\n    // If the final answer was previously evaluated, any new number inputs will overwrite the display\r\n    if (wasEvaluated) {\r\n      setDisplay(\"\" + button.value);\r\n      wasEvaluated = false;\r\n    } \r\n    // Else if the display is 0, any new number input will replace the display (this prevents leading 0's)\r\n    else if (display === \"0\") {\r\n      setDisplay(\"\" + button.value);\r\n    } \r\n    // Else keep appending new number inputs onto the end of the display value number string\r\n    else {\r\n      setDisplay(display + button.value);\r\n    }\r\n  }\r\n  \r\n  // Function to handle clear and all clear button clicks\r\n  const handleClear = (button) => {\r\n    clearDisplay();\r\n\r\n    if (button.value === \"All Clear\") {\r\n      clearResult();\r\n      clearOperator();\r\n      clearMemory();\r\n    }\r\n  }\r\n\r\n  // Function to format the calculation values to scientific notation if they are too long\r\n  const formatCalculation = (calculation) => {\r\n    calculation = Number(calculation);\r\n    // Format output precision \r\n    const maxStringLength = 13;\r\n    const decimalPrecision = 11;\r\n    const exponentPrecision = 6;\r\n    // Get length of calculation as a string to get the length of the input\r\n    let calculationStringLength = (\"\" + calculation).length;\r\n    // If the calculation string is too large to display, then we need to adjust the calculation precision\r\n    if (calculationStringLength > maxStringLength) {\r\n      // Get base 10 exponent of calculation\r\n      const base10Exp = Math.log(Math.abs(calculation)) / Math.log(10);\r\n      // If the base 10 exponenent (sci. notation exponent is larger than allowed, or negative, use the smaller exponentPrecision\r\n      // Else use the larger decimal precision\r\n      if ((base10Exp > decimalPrecision) || (base10Exp < 0) ) {\r\n        calculation = calculation.toExponential(exponentPrecision);\r\n      } else {\r\n        calculation = calculation.toPrecision(decimalPrecision);\r\n      }\r\n    }\r\n    return calculation;\r\n  }\r\n\r\n  // Calculation returns the resulting value when using the current operator on the previous result value and the current display value\r\n  // If no calculation was done, returns null\r\n  const calculate = (operator) => {\r\n    let calculation = null;\r\n    // If there is an existing operator, use it to apply the current display value to the stored result\r\n    // If there is no result or display value, replace it with 0 or 1 (for multiply/divide)\r\n    if (operator) {\r\n      // Perform Calculation\r\n      switch (operator) {\r\n        case \"+\": // Add\r\n          calculation = (result ? parseFloat(result) : 0) + (display ? parseFloat(display) : 0)\r\n          break;\r\n  \r\n        case \"-\": // Subtract\r\n          calculation = (result ? parseFloat(result) : 0) - (display ? parseFloat(display) : 0)\r\n          break;\r\n    \r\n        case \"\\u00f7\": // Divide\r\n          calculation = (result ? parseFloat(result) : 1) / (display ? parseFloat(display) : 1)\r\n          break;\r\n  \r\n        case \"\\u00d7\": // Multiply\r\n          calculation = (result ? parseFloat(result) : 1) * (display ? parseFloat(display) : 1)\r\n          break;\r\n  \r\n        case \"%\": // Percent\r\n          calculation = (display ? parseFloat(display) : 0) / 100\r\n          break;\r\n\r\n        case \"\\u221a\": // Square root\r\n          calculation = Math.sqrt(display ? parseFloat(display) : 0)\r\n          break;\r\n\r\n          \r\n        case \"+/-\": // Sign\r\n          calculation = (display ? -parseFloat(display) : 0)\r\n          break;\r\n                \r\n        default:\r\n          break;\r\n      }\r\n      calculation = formatCalculation(calculation);\r\n    }\r\n    \r\n    return calculation;\r\n  } \r\n\r\n  // Handle selection of general mathematical operators\r\n  const handleOperator = (button) => {\r\n    // Only change the result if there is a display value\r\n    if (display) {\r\n      // If there is no existing result, set it to display \r\n      if (!result) {\r\n        setResult(display);\r\n      } else {\r\n        // Perform a calculation with the currently selected operator\r\n        let calculation = calculate(operator);\r\n        // If a valid calculation was performed, then return the \r\n        if (calculation !== null) {\r\n          setResult(calculation);\r\n        }\r\n      }\r\n    }\r\n    // If there is an existing result value or a display value that will update the result value, Clear existing display and change to new operator\r\n    if (display || result) {\r\n      clearDisplay();\r\n      setOperator(button.text);\r\n    }\r\n  }\r\n\r\n  // Handle Equal button clicks\r\n  const handleEqual = () => {\r\n    // Perform any outstanding calculations and update the display\r\n    let calculation = calculate(operator);\r\n    if (calculation !== null) {\r\n      setDisplay(\"\" + calculation);\r\n      clearResult();\r\n      clearOperator();\r\n      wasEvaluated = true;\r\n    }\r\n  }\r\n\r\n  // Function to handle decimal button clicks\r\n  const handleDecimal = (button) => {\r\n    // If the final answer was previously evaluated, any new number inputs will overwrite the display\r\n    if (wasEvaluated) {\r\n      setDisplay(\"\" + button.value);\r\n      wasEvaluated = false;\r\n    } else if (display.indexOf(\".\") === -1) {\r\n      setDisplay(display + button.value);\r\n    }\r\n  }\r\n\r\n  // Function to handle unary operators\r\n  // Unary operators are operations that require a single input (e.g square-root, percent)\r\n  const handleUnaryOperator = (button) => {\r\n    // Only change the result if there is a display value\r\n    if (display) {\r\n      let calculation = calculate(button.text);\r\n      setDisplay(\"\" + calculation);\r\n      wasEvaluated = true;\r\n    }\r\n  }\r\n\r\n  const handleMemory = (button) => {\r\n    let calculation;\r\n    switch (button.value) {\r\n      case \"Memory Save\":\r\n        if (display) {\r\n          setMemory(formatCalculation(display));\r\n        }\r\n        break;\r\n        \r\n      case \"Memory Clear\":\r\n        setMemory();\r\n        break;\r\n        \r\n      case \"Memory Recall\":\r\n        if (memory) {\r\n          setDisplay(formatCalculation(memory));\r\n        }\r\n        break;\r\n    \r\n      case \"Memory Addition\":\r\n        calculation = Number(memory) + Number(display);\r\n        setMemory(formatCalculation(calculation));\r\n        break;\r\n    \r\n      case \"Memory Subtract\":\r\n        calculation = Number(memory) - Number(display);\r\n        setMemory(formatCalculation(calculation));\r\n        break;\r\n    \r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const handleButtonClick = (button) => {\r\n    switch (button.type) {\r\n      case \"number\":\r\n        handleNumber(button);\r\n        break;\r\n    \r\n      case \"clear\":\r\n        handleClear(button);\r\n        break;\r\n  \r\n      case \"operator\":\r\n        handleOperator(button);\r\n        break;\r\n  \r\n      case \"enter\":\r\n        handleEqual();\r\n        break;\r\n  \r\n      case \"decimal\":\r\n        handleDecimal(button);\r\n        break;\r\n\r\n      case \"unary-operator\":\r\n        handleUnaryOperator(button);\r\n        break\r\n      \r\n      case \"memory\":\r\n        handleMemory(button);\r\n        break\r\n          \r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <CalcDisplay \r\n        display={display}\r\n        result={result}\r\n        operator={operator}\r\n        memory={memory}\r\n      />\r\n      <CalcButtons \r\n        handleButtonClick={handleButtonClick}\r\n      />\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default Calculator;\r\n","function Footer({year, author}) {\r\n\r\n\r\n  return (\r\n    <footer>\r\n      <p>© {year} {author ? author : \"\"}</p>\r\n    </footer>\r\n  );\r\n  \r\n}\r\n\r\nFooter.defaultProps = {\r\n  year: new Date().getFullYear()\r\n}\r\n\r\nexport default Footer;\r\n","import { BrowserRouter } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport Calculator from \"./Calculator\";\r\nimport Footer from \"./Footer\";\r\n\r\nfunction App() {\r\n \r\n  return (\r\n    <BrowserRouter basename=\"/calculator\">\r\n      <div className=\"wrapper\">\r\n        <Header\r\n          title=\"React Calculator\"\r\n        />\r\n        <Calculator />\r\n        <Footer\r\n          year={new Date().getFullYear()}\r\n          author=\"Clayton Jang\"\r\n        />\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n  \r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}